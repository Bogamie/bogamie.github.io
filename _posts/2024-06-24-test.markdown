---
title:  "test"
date:   2024-06-24 19:45:40 +0900
categories: jekyll update
published: false
---
```html
<!-- For all browsers -->
<link rel="stylesheet" href="{{ '/assets/css/main.css' | relative_url }}">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@latest/css/all.min.css" as="style"
    onload="this.onload=null;this.rel='stylesheet'">

<!-- fonts -->
<link rel="preconnect" href="https://rsms.me/">
<link rel="stylesheet" href="https://rsms.me/inter/inter.css">

<noscript>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@latest/css/all.min.css">
</noscript>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
```

```scss
.recent-posts {
    display: block;

    &__list {
        display: grid;
        grid-template-rows: repeat(2, 1fr);
        grid-template-columns: repeat(12, 1fr);
        gap: 1.25vw;
        width: 100%;
        height: 55vh;
    }
}
.page-header {
    padding-top: 7vh;
    padding-bottom: 7vh;
}
.section-title {
    font-size: 2.25em;
    font-weight: 700;
    text-align: center;
}
.post-info {
    padding: 1em;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
}
```

```py
import time
import pyautogui
from PIL import ImageGrab
import pytesseract
import cv2
import numpy as np
from win11toast import toast
import ctypes
import os

class Macro:
    """
    각종 매크로들을 모아놓은 클래스

    detectMacro()
    extractNumber()
    pressKey()
    mouseEvent()
    click()
    drift()
    turn()
    nitro()
    shockWave()
    selectWay()
    """
    def __init__(self) -> None:
        pass

    def detectMacro(self, template_path, x, y, width, height, threshold=0.8):
        """
        특정 영역에서 주어진 템플릿 이미지를 찾는 함수입니다.

        :param template_path: 템플릿 이미지 경로
        :param x: 스크린샷 영역의 x 좌표
        :param y: 스크린샷 영역의 y 좌표
        :param width: 스크린샷 영역의 너비
        :param height: 스크린샷 영역의 높이
        :param threshold: 템플릿 매칭 임계값
        :return: 템플릿이 감지되면 True, 그렇지 않으면 False
        """
        template = cv2.imread(template_path, cv2.IMREAD_COLOR)
    
        if template is None:
            raise FileNotFoundError(f"Template image not found at {template_path}")

        screen = np.array(pyautogui.screenshot(region=(x, y, width, height)))
        screen_bgr = cv2.cvtColor(screen, cv2.COLOR_RGB2BGR)

        res = cv2.matchTemplate(screen_bgr, template, cv2.TM_CCOEFF_NORMED)
        _, max_val, _, _ = cv2.minMaxLoc(res)

        return max_val > threshold
    
    def extractNumber(self, x, y, width, height):
        """
        특정 영역에서 숫자를 추출하는 함수입니다.

        :param x: 스크린샷 영역의 x 좌표
        :param y: 스크린샷 영역의 y 좌표
        :param width: 스크린샷 영역의 너비
        :param height: 스크린샷 영역의 높이
        :return: 추출된 숫자 (정수), 추출 실패 시 None
        """
        screenshot = ImageGrab.grab(bbox=(x, y, x + width, y + height))
        
        screenshot_cv = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        
        gray = cv2.cvtColor(screenshot_cv, cv2.COLOR_BGR2GRAY)
        
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        custom_config = r'--oem 3 --psm 6 outputbase digits'
        text = pytesseract.image_to_string(thresh, config=custom_config)
        
        try:
            number = int(text.strip())
        except ValueError:
            number = 0
    
        return number
    
    def pressKey(self, key, interval = 1):
        """
        주어진 키를 지정된 횟수만큼 자동으로 누르는 함수입니다.

        :param key: 누를 키 (예: 'd')
        :param interval: 각 키 입력 간의 간격(초)
        """
        pyautogui.press(key)
        time.sleep(interval)
    
    def mouseEvent(self, dwFlags, dwData, dwExtraInfo):
        """
        마우스 이벤트를 발생시키는 함수입니다.

        :param dwFlags: 마우스 이벤트 플래그
        :param dwData: 추가적인 마우스 데이터
        :param dwExtraInfo: 추가적인 마우스 정보
        """
        ctypes.windll.user32.mouse_event(dwFlags, dwData, dwExtraInfo)

    def click(self, x, y, t): # 실행시간: t + 0.1 (s)
        """
        주어진 위치를 클릭하는 함수입니다.

        :param x: 클릭할 x 좌표
        :param y: 클릭할 y 좌표
        :param t: 클릭 후 대기 시간 (초)
        """
        self.mouseEvent(0x0008, 0, 0)
        self.mouseEvent(0x0010, 0, 0)
        
        pyautogui.moveTo(x, y)
        self.mouseEvent(0x0002, 0, 0)
        time.sleep(t)
        self.mouseEvent(0x0004, 0, 0)
        
    def drift(self, t): # 실행시간: t + 0.13 ~ 0.15 (s)
        """
        드리프트 동작을 수행하는 함수입니다.

        :param t: 드리프트 시간 (초)
        """
        self.click(445, 1390, t)
    
    def keepDrift(self):
        self.mouseEvent(0x0008, 0, 0)
        self.mouseEvent(0x0010, 0, 0)
        
        pyautogui.moveTo(445, 1390)
        self.mouseEvent(0x0002, 0, 0)
    
    def unlockDrift(self):
        self.mouseEvent(0x0004, 0, 0)

    def turn(self): # 실행시간: 0.5 (s)
        """
        회전 동작을 수행하는 함수입니다.
        """
        self.click(445, 1390, 0.1)
        time.sleep(0.02)
        self.click(445, 1390, 0.1)
    
    def firstNitro(self):
        self.click(2430, 1390, 0.1)

    def secondNitro(self):
        self.click(2430, 1390, 0.1)
        time.sleep(0.1)
        self.click(2430, 1390, 0.1)
    
    def perfectNitro(self): # 실행시간: 0.9 ~ 1.0 (s)
        """
        부스터 동작을 수행하는 함수입니다.
        """
        self.click(2430, 1390, 0.1)
        time.sleep(0.6)
        self.click(2430, 1390, 0.1)

    def shockWave(self):
        """
        쇼크웨이브 동작을 수행하는 함수입니다.
        """
        self.click(2430, 1390, 0.1)
        time.sleep(0.05)
        self.click(2430, 1390, 0.1)

    def selectWay(self, menu, sel): # 실행시간: 0.16 ~ 0.19 s
        """
        메뉴에서 특정 항목을 선택하는 함수입니다.

        :param menu: 메뉴 번호 (2, 3, 4 중 하나)
        :param sel: 선택 항목 번호
        """
        if menu == 2:
            if sel == 1:
                self.click(1350, 335, 0.05)
            else:
                self.click(1530, 335, 0.05)
        elif menu == 3:
            if sel == 1:
                self.click(1270, 335, 0.05)
            elif sel == 2:
                self.click(1440, 335, 0.05)
            else:
                self.click(1610, 335, 0.05)
        elif menu == 4:
            if sel == 1:
                self.click(1180, 335, 0.05)
            elif sel == 2:
                self.click(1350, 335, 0.05)
            elif sel == 3:
                self.click(1530, 335, 0.05)
            else:
                self.click(1700, 335, 0.05)
```

```c
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

[System.Serializable, VolumeComponentMenu("Blur")]
public class BlurSettings : VolumeComponent, IPostProcessComponent {
    [Tooltip("Standard deviation (spread) of the blur. Grid size is approx. 3x larger")]
    public ClampedFloatParameter strength = new ClampedFloatParameter(0.0f, 0.0f, 15.0f);

    public bool IsActive() {
        return (strength.value > 0.0f) && active;
    }

    public bool IsTileCompatible() {
        return false;
    }
}
```